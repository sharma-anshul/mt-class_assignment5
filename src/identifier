#!/usr/bin/env python
import sys
import optparse
from collections import defaultdict

optparser = optparse.OptionParser()
optparser.add_option("-t", "--train", dest="train", default="../data/train/", help="Data filename prefix (default=data)")
optparser.add_option("-s", "--suffix", dest="suffix", default="_train", help="Data filename suffix (default=_train")
optparser.add_option("-i", "--input", dest="input", default="../data/dev/dev_set", help="Name of input file (default=data/dev/dev_set")

(opts, _) = optparser.parse_args()

lang = ['eng', 'fra', 'deu', 'ita', 'spa']
suffix = opts.suffix
train_dir = opts.train
input_file = opts.input

def createNGrams(text, n):
	ngrams = defaultdict(float)
	for i in xrange(len(text) - n):
		ngrams[text[i: i+n]] += 1
	return ngrams

def getDotProd(vec1, vec2):
	num = 0.0
	for key in vec1:
		num += vec1[key] * vec2[key]
	den = len(vec1) * len(vec2)
	return (num/den)

sys.stderr.write("Training\n")
langs = []
for i in xrange(len(lang)):
	text = open(train_dir + lang[i] + suffix).read().lower().strip()
	ngrams = createNGrams(text, 6) 
	langs += [ngrams]
sys.stderr.write("Testing\n")
for line in open(input_file):
	products = []
	ngrams = createNGrams(line.lower().strip(), 6)
	max, maxInd = 0.0, -1
	for i in xrange(len(langs)):
		dotProd = getDotProd(ngrams, langs[i])
		if dotProd > max:
			max, maxInd = dotProd, i
	print lang[maxInd]
